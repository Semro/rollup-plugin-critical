{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import {Plugin} from 'rollup';\nimport path from 'path';\nimport { CriticalConfig } from './@types/critical';\nimport { CriticalPluginConfig } from './@types/rollup-plugin-critical';\nconst critical = require('critical');\n\nconst criticalSuffix = '_critical.min.css';\n\n/**\n * Default `criticalConfig` passed in to `critical`\n */\nconst defaultCriticalConfig: Partial<CriticalConfig> = {\n  inline: false,\n  minify: true,\n  extract: false,\n  width: 1200,\n  height: 1200,\n  penthouse: {\n    blockJSRequests: false\n  }\n};\n\n/**\n * [Vite.js](https://vitejs.dev/) & [Rollup](https://rollupjs.org/) plugin for generating critical CSS\n * that uses the [critical](https://github.com/addyosmani/critical) generator under the hood.\n *\n * @param {CriticalPluginConfig} pluginConfig - the plugin configuration object\n * @param {Function} callback - callback upon completion of the critical CSS generation\n * @constructor\n */\nfunction PluginCritical(pluginConfig: CriticalPluginConfig, callback?: Function): Plugin {\n  return {\n    name: 'critical',\n    async writeBundle(outputOptions, bundle) {\n      const css: Array<string> = [];\n      // Find all of the generated CSS assets\n      for (const chunk of Object.values(bundle)) {\n        if (chunk.type === 'asset' && chunk.fileName.endsWith('.css')) {\n          const cssFile = path.join(outputOptions.dir || '', chunk.fileName);\n          css.push(cssFile);\n        }\n      }\n      // If we have no CSS, skip bundle\n      if (!css.length) {\n        return;\n      }\n      // Iterate through the pages\n      for (const page of pluginConfig.criticalPages) {\n        const criticalBase = pluginConfig.criticalBase;\n        const criticalSrc = pluginConfig.criticalUrl + page.uri;\n        const criticalDest = page.template + criticalSuffix;\n        // Merge in our options\n        const options = Object.assign(\n            { css },\n            defaultCriticalConfig,\n            {\n              base: criticalBase,\n              src: criticalSrc,\n              target: criticalDest,\n            },\n            pluginConfig.criticalConfig\n        );\n        // Generate the Critical CSS\n        console.log(`Generating critical CSS from ${criticalSrc} to ${criticalDest}`);\n        await critical.generate(options, (err: string) => {\n          if (err) {\n            console.error(err);\n          }\n          if (callback) {\n            callback(err);\n          }\n        });\n      }\n    }\n  }\n}\n\nexport default PluginCritical;\n"],
  "mappings": ";;;;;;;AACA;AAGA,IAAM,WAAW,UAAQ;AAEzB,IAAM,iBAAiB;AAKvB,IAAM,wBAAiD;AAAA,EACrD,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,WAAW;AAAA,IACT,iBAAiB;AAAA;AAAA;AAYrB,wBAAwB,cAAoC,UAA6B;AACvF,SAAO;AAAA,IACL,MAAM;AAAA,UACA,YAAY,eAAe,QAAQ;AACvC,YAAM,MAAqB;AAE3B,iBAAW,SAAS,OAAO,OAAO,SAAS;AACzC,YAAI,MAAM,SAAS,WAAW,MAAM,SAAS,SAAS,SAAS;AAC7D,gBAAM,UAAU,KAAK,KAAK,cAAc,OAAO,IAAI,MAAM;AACzD,cAAI,KAAK;AAAA;AAAA;AAIb,UAAI,CAAC,IAAI,QAAQ;AACf;AAAA;AAGF,iBAAW,QAAQ,aAAa,eAAe;AAC7C,cAAM,eAAe,aAAa;AAClC,cAAM,cAAc,aAAa,cAAc,KAAK;AACpD,cAAM,eAAe,KAAK,WAAW;AAErC,cAAM,UAAU,OAAO,OACnB,CAAE,MACF,uBACA;AAAA,UACE,MAAM;AAAA,UACN,KAAK;AAAA,UACL,QAAQ;AAAA,WAEV,aAAa;AAGjB,gBAAQ,IAAI,gCAAgC,kBAAkB;AAC9D,cAAM,SAAS,SAAS,SAAS,CAAC,QAAgB;AAChD,cAAI,KAAK;AACP,oBAAQ,MAAM;AAAA;AAEhB,cAAI,UAAU;AACZ,qBAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQrB,IAAO,cAAQ;",
  "names": []
}
